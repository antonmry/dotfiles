#.bash_profile

# Get the aliases and function
if [ -f ~/.bashrc ]; then
	. ~/.bashrc
fi

if [ -f ~/.bash_aliases ]; then
	. ~/.bash_aliases
fi

# Why this is not by default?
export TERM=screen-256color
#export TERM=xterm-256color
#export TERM=xterm

# User specific environment and startup programs

EDITOR=nvim
export EDITOR

unset SSH_ASKPASS

# avoid duplicates..
export HISTCONTROL=ignoredups:erasedups
export HISTSIZE=50000
export HISTFILESIZE=50000

# append history entries..
shopt -s histappend

# After each command, save and reload history
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

GOPATH=~/go
GOROOT=~/Software/go
GOBIN=~/Software/go-bin

export GOPATH
export GOROOT
export GOBIN

SPARK_HOME=~/Software/spark
export SPARK_HOME

CONFLUENT_HOME=~/Software/confluent
export CONFLUENT_HOME

GATLING_HOME=~/Software/gatling
export GATLING_HOME

FLINK_HOME=~/Software/flink-1.9.3
export FLINK_HOME

PATH=$PATH:$GOBIN:$GOROOT/bin:$HOME/.local/bin:$HOME/bin:$GRADLE_HOME/bin:$GATLING_HOME/bin:$HOME/Software/confluent/bin:$SPARK_HOME/bin:$FLINK_HOME/bin:/opt/zoe/bin:$HOME/.pulumi/bin
export PATH

source "/usr/share/fzf/shell/key-bindings.bash"
source ~/bin/fz.sh

# Functions

function markdown-to-pdf() {
    pandoc $@ --css=https://raw.githubusercontent.com/otsaloma/markdown-css/master/github.css --to=html5 --self-contained -o $@.pdf --metadata pagetitle="Document"
}
 
function markdown-preview() {
    pandoc $@ --css=$HOME/Documents/github.css --to=html5 --self-contained -o /tmp/$@.html --metadata pagetitle="Document"
    qutebrowser /tmp/$@.html &
    fswatch -0 -x -r $@ | while read -d "" event; do 
     case $event in *Created|*Updated|*Removed|*Renamed|*OwnerModified|*AttributeModified|*MovedFrom|*MovedTo )
      echo "$(date) change detected"
      pandoc $@ --css=$HOME/Documents/github.css --to=html5 --self-contained -o /tmp/$@.html --metadata pagetitle="Document"
      ;;
     esac
    done
    #pandoc $@ | lynx -stdin -vikeys
}

function todo() {
  rclone sync GoogleDrive:todo ~/Documents/todo/
  /home/antonmry/bin/todo.sh "$@"
  rclone sync ~/Documents/todo/ GoogleDrive:todo 
}

## SDKMAN

_sdkman_complete()
{
  local CANDIDATES
  local CANDIDATE_VERSIONS

  COMPREPLY=()

  if [ $COMP_CWORD -eq 1 ]; then
    COMPREPLY=( $(compgen -W "install uninstall rm list ls use current outdated version default selfupdate broadcast offline help flush" -- ${COMP_WORDS[COMP_CWORD]}) )
  elif [ $COMP_CWORD -eq 2 ]; then
    case "${COMP_WORDS[COMP_CWORD-1]}" in
      "install" | "uninstall" | "rm" | "list" | "ls" | "use" | "current" | "outdated" )
        CANDIDATES=$(echo "${SDKMAN_CANDIDATES_CSV}" | tr ',' ' ')
        COMPREPLY=( $(compgen -W "$CANDIDATES" -- ${COMP_WORDS[COMP_CWORD]}) )
        ;;
      "offline" )
        COMPREPLY=( $(compgen -W "enable disable" -- ${COMP_WORDS[COMP_CWORD]}) )
        ;;
      "selfupdate" )
        COMPREPLY=( $(compgen -W "force" -P "[" -S "]" -- ${COMP_WORDS[COMP_CWORD]}) )
        ;;
      "flush" )
        COMPREPLY=( $(compgen -W "candidates broadcast archives temp" -- ${COMP_WORDS[COMP_CWORD]}) )
        ;;
      *)
        ;;
    esac
  elif [ $COMP_CWORD -eq 3 ]; then
    case "${COMP_WORDS[COMP_CWORD-2]}" in
      "uninstall" | "rm" | "use" | "default" )
        _sdkman_candidate_versions ${COMP_WORDS[COMP_CWORD-1]}
        COMPREPLY=( $(compgen -W "$CANDIDATE_VERSIONS" -- ${COMP_WORDS[COMP_CWORD]}) )
        ;;
      "install")
        _sdkman_candidate_not_installed_versions ${COMP_WORDS[COMP_CWORD-1]}
        COMPREPLY=( $(compgen -W "$CANDIDATE_VERSIONS" -- ${COMP_WORDS[COMP_CWORD]}) )
        ;;
      *)
        ;;
    esac
  fi

  return 0
}

_sdkman_candidate_versions(){

  CANDIDATE_LOCAL_VERSIONS=$(__sdkman_cleanup_local_versions $1)
  if [ "$SDKMAN_OFFLINE_MODE" = "true" ]; then
    CANDIDATE_VERSIONS=$CANDIDATE_LOCAL_VERSIONS
  else
    CANDIDATE_ONLINE_VERSIONS="$(curl -s "${SDKMAN_SERVICE}/candidates/$1" | tr ',' ' ')"
    CANDIDATE_VERSIONS="$(echo $CANDIDATE_ONLINE_VERSIONS $CANDIDATE_LOCAL_VERSIONS |sort | uniq ) "
  fi

}

_sdkman_candidate_not_installed_versions(){
  CANDIDATE_LOCAL_VERSIONS=$(__sdkman_cleanup_local_versions $1)
  if [ "$SDKMAN_OFFLINE_MODE" = "false" ]; then
    CANDIDATE_ONLINE_VERSIONS="$(__sdkman_list_versions $1 | grep " " | grep "\." | cut -c 6-)"
    CANDIDATE_VERSIONS="$(echo $CANDIDATE_ONLINE_VERSIONS $CANDIDATE_LOCAL_VERSIONS | tr ' ' '\n' | sort | uniq -u) "
  fi
}

__sdkman_cleanup_local_versions(){

  __sdkman_build_version_csv $1 | tr ',' ' '

}

complete -F _sdkman_complete sdk

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/home/antonmry/.sdkman"
[[ -s "/home/antonmry/.sdkman/bin/sdkman-init.sh" ]] && source "/home/antonmry/.sdkman/bin/sdkman-init.sh"
